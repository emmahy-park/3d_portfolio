/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: 小王子 (https://sketchfab.com/hong2695429209)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/le-petit-prince-a373654d89894bb49e8df5b2ab6d4b7f
Title: 小王子  Le Petit Prince
*/

import React, { useRef, useEffect, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import { a } from '@react-spring/three'
import planetScene from '../assets/3d/planet.glb'

const Planet = ({isRotating, setIsRotating, setCurrentStage, ...props}) => {
  
  const planetRef = useRef();
  const { nodes, materials } = useGLTF(planetScene);
  const { gl, viewport } = useThree();

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  }

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
        const clientX = e.touches ? e.touches[0].clientX : e.clientX;
        const delta = (clientX - lastX.current) / viewport.width;
        planetRef.current.rotation.y += delta * 0.01* Math.PI;
        lastX.current = clientX;
        rotationSpeed.current = delta * 0.001 * Math.PI;
    }
  }

  useFrame(() => {
    if (!isRotating) {
        rotationSpeed.current *= dampingFactor;

        if (Math.abs(rotationSpeed.current) < 0.001) rotationSpeed.current = 0;
        planetRef.current.rotation.y += rotationSpeed.current;
    } else {
        const rotation = planetRef.current.rotation.y;

        const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

        // Set the current stage based on the planet's orientation
        switch (true) {
            case normalizedRotation >= 0.1 && normalizedRotation <= 0.9:
                setCurrentStage(4);
                break;
            case normalizedRotation >= 1.5 && normalizedRotation <= 2.3:
                setCurrentStage(3);
                break;
            case normalizedRotation >= 3.0 && normalizedRotation <= 3.8:
                setCurrentStage(2);
                break;
            case normalizedRotation >= 4.4 && normalizedRotation <= 5.6:
                setCurrentStage(1);
                break;
            default:
                setCurrentStage(null);
        }
    }
  })

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);

    return () => {
        canvas.removeEventListener('pointerdown', handlePointerDown);
        canvas.removeEventListener('pointerup', handlePointerUp);
        canvas.removeEventListener('pointermove', handlePointerMove);
    }
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove])

  return (
    <a.group ref={planetRef} {...props} dispose={null}>
      <a.group rotation={[-Math.PI / 2, 0, 0]} scale={0.005}>
        <mesh
          geometry={nodes.Material2.geometry}
          material={materials.Material__21}
        />
        <mesh
          geometry={nodes.Material2_1.geometry}
          material={materials.Translucent_Glass_Gray}
        />
        <mesh
          geometry={nodes.Material2_2.geometry}
          material={materials['0007_MistyRose']}
        />
        <mesh
          geometry={nodes.Material2_3.geometry}
          material={materials.material}
        />
        <mesh
          geometry={nodes.Material2_4.geometry}
          material={materials['13_obj']}
        />
        {/* <mesh
          geometry={nodes.Material2_5.geometry}
          material={materials['Dosch-Space_0019-thumb.jpg']}
        /> */}
        <mesh 
          geometry={nodes.Material2_6.geometry}
          material={materials['PM3D_Cube3D2.005']}
        />
        <mesh
          geometry={nodes.Material2_7.geometry}
          material={materials.PolySphere2}
        />
        <mesh
          geometry={nodes.Material2_8.geometry}
          material={materials['02_copy4_1.002']}
        />
        <mesh
          geometry={nodes.Material2_9.geometry}
          material={materials['02_10.002']}
        />
        <mesh
          geometry={nodes.Material2_10.geometry}
          material={materials['PM3D_Sphere3D1.002']}
        />
        <mesh
          geometry={nodes.Material2_11.geometry}
          material={materials['PM3D_Sphere3D1.002']}
        />
        <mesh
          geometry={nodes.Material2_12.geometry}
          material={materials.PolySphere2_9}
        />
        <mesh
          geometry={nodes.Material2_13.geometry}
          material={materials['PM3D_Cylinder3D1.002']}
        />
        <lineSegments geometry={nodes.Material3.geometry} material={materials.edge_color000255} />
        <mesh
          geometry={nodes.Material2_14.geometry}
          material={materials['02_copy4.003']}
        />
        <mesh
          geometry={nodes.Material2_15.geometry}
          material={materials['02_07.002']}
        />
        <mesh
          geometry={nodes.Material2_16.geometry}
          material={materials['12_02']}
        />
        <mesh
          geometry={nodes.Material2_17.geometry}
          material={materials['02_copy4_2']}
        />
        <mesh
          geometry={nodes.Material2_18.geometry}
          material={materials['12_01']}
        />
        <mesh
          geometry={nodes.Material3_1.geometry}
          material={materials['02_copy4_2_0']}
        />
        <mesh
          geometry={nodes.Material2_19.geometry}
          material={materials.Material__20}
        />
      </a.group>
    </a.group>
  )
}

export default Planet;